/*
Таблица ниже содержит информацию об instagram-блогерах: id, название аккаунта, количество подписчиков, среднее 
количество лайков и среднее количество комментариев на один пост.
Напишите SQL-запрос для подбора блогеров. В первую очередь должны идти блогеры с максимальным количеством подписчиков, 
далее, если количество подписчиков равно, то нужно брать блогеров с максимальным количеством лайков, а затем с максимальным количеством комментариев.
В итоговой таблице выведите следующие поля: num — номер по порядку начиная с 1, аккаунт блогера, количество подписчиков, 
число лайков, число комментариев. Первыми должны идти блогеры с максимальным числом подписчиков.
*/

select row_number() over(order by subs desc, avg_likes desc, avg_comments desc) as num, blogger, subs, avg_likes, avg_comments
from bloggers

/*
Напишите SQL-запрос, который пронумерует посты каждого блогера в порядке их популярности на основе лайков. 
Самые «залайканные» посты должны получить единицу и чем меньше лайков, тем больший номер у них должен быть. 
Для каждого блогера нужно вести свою отдельную нумерацию. Популярность постов выводите в колонке post_popularity, 
которая должна стоять первой. После неё должны идти имя блогера, название поста и количество лайков.
Итоговые данные отсортируйте по имени блогера, а затем по популярности записей (самая популярная вверху).
*/

select row_number() over(partition by blogger order by likes desc) as post_popularity, blogger, post, likes
from bloggers_posts
order by blogger, post_popularity

/*
В прошлой задаче вы проранжировали посты по популярности. Теперь оставьте по одному самому популярному посту 
от каждого блогера и посчитайте его вклад в общую популярность этих отобранных постов.
Выведите в итоговой таблице 5 колонок: blogger — имя блогера, post — название поста, likes — количество лайков 
поста, total_likes — общее количество лайков лучших постов, percent — процент лайков текущего поста относительно 
общего количества лайков. Процент следует вывести с двумя знаками после десятичной точки.
Итоговые данные отсортируйте по популярности постов: чем популярней — тем выше.
*/

select blogger, post, likes,
sum(likes) over() as total_likes,
round(sum(likes) over(partition by post) * 100 / sum(likes) over(), 2) as percent
from (
    select row_number() over(partition by blogger order by likes desc) as post_popularity, blogger, post, likes
    from bloggers_posts
) temp_table
where post_popularity = 1
order by likes desc

/*
В прошлой задаче вы вычисли процент лайков текущего поста относительно общего количества лайков, но общее 
количество рассчитывалось только на основе трёх лучших постов.
Внесите в ваш SQL-запрос изменения, чтобы он считал процент лайков каждого поста относительно всех лайков всех 
постов из таблицы bloggers_posts. При этом в итоговой таблице также должно остаться три лучших поста, просто у них 
будет меньший процент, так как учитываются все лайки. Количество всех лайков (total_likes) также будет другим.
Порядок столбцов и итоговая сортировка должны быть такими же, как и в прошлой задаче.
*/

select blogger, post, likes, total_likes, percent
from (
    select blogger, post, likes,
    sum(likes) over() as total_likes,
    round(sum(likes) over(partition by post) * 100 / sum(likes) over(), 2) as percent, 
    post_popularity
    from (
        select row_number() over(partition by blogger order by likes desc) as post_popularity, blogger, post, likes
        from bloggers_posts
    ) temp_table
) temp_table_2
where post_popularity = 1
order by likes desc
