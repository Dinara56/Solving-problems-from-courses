/*
В таблице films содержится информация о фильмах: id, рейтинг, год выпуска, количество голосов и жанр. 
Напишите SQL-запрос, который выведет четыре столбца: жанр, место фильма в рейтинге в пределах своего жанра (колонка genre_place), рейтинг фильма и его название.
Учитывайте, что места нужно расставить от 1 до N, где 1 будет у самого популярного фильма.
Итоговые данные нужно сперва отсортировать по жанру, а потом по месту фильма.
*/

select genre, row_number() over(partition by genre order by rating desc) as genre_place, rating, name 
from films
order by genre, genre_place

/*
В таблице ниже представлены результаты соревнований по программированию. 
Выведите все столбцы + добавьте колонку place с местами, которые заняли участники. 
Первое место получает программист, который набрал больше всех очков.
Итоговые данные должны быть отсортированы по id.
*/

select *, row_number() over(order by points desc) as place
from results
order by id

/*
У некоторых участников изменились набранные очки, а также появилось время выполнения задания.
Выведите все столбцы + добавьте колонку place с местами, которые заняли участники. 
Первое место получает программист, который набрал больше всех очков. 
Если несколько участников набрали одинаковое количество баллов, то лучшим среди них считается тот, кто выполнил задания за меньшее время.
Итоговые данные выведите в соответствии с занятыми местами - первое место сверху.
*/

select *, row_number() over(order by points desc, time) as place
from results
order by place

/*
Напишите SQL-запрос, который выведет по два самых популярных фильма каждого жанра. 
Итоговая таблица должна содержать 3 столбца: название, рейтинг и жанр. Финальные данные нужно отсортировать по рейтингу в обратном порядке.
PS. Для решения данной задачи нужно использовать вложенные запросы.
*/

select name, rating, genre 
from (
    select name, rating, genre, row_number() over(partition by genre order by rating desc) as rn from films
) as ranked_films
where rn in (1, 2)
order by rating desc

/*
Напишите SQL-запрос, который выведет 3 столбца: декаду (decade), позицию фильма (place) и его название.
Декаду нужно выводить в формате ГГГ0, где первые три цифры отвечают за год, а последняя - всегда ноль. 
Например, для фильма, который вышел в 1999 году декадой будет 1990.
*/

select FLOOR(year / 10) * 10 AS decade, 
row_number() over(partition by FLOOR(year / 10) * 10 order by rating desc) as place,
name
from films

/*
В таблицах ниже находятся клиенты и заказы, которые они сделали. Наша задача найти среди них VIP клиентов. 
Статус VIP пользователь получает если он сделал и оплатил (status=success) 2 и более заказов.
Напишите SQL запрос, для вывода всех VIP клиентов. Итоговая таблица должна содержать id пользователя, 
его имя, фамилию и дату, когда он стал VIP клиентом. Дату выведите в колонке vip_date в формате ДД.ММ.ГГГГ. 
Идентификатор пользователя нужно вывести в колонке с именем id.
Итоговую таблицу отсортируйте по id пользователей.
*/

select id, first_name, last_name, DATE_FORMAT(date,'%d.%m.%Y') as vip_date
from (
    select user_id as id, first_name, last_name, date, status,
    row_number () over (partition by user_id) as sales_num
    from users
    join sales on users.id = sales.user_id
    where status = 'success'
) temp_table
where sales_num =2
order by id;