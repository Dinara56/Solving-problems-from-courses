/*
В таблице ниже содержится список квартир агентства недвижимости. Каждый раз, когда клиент просит подобрать варианты, ему предлагаются три самые 
подходящие позиции. Если по заданным критериям получается больше трёх вариантов, например несколько квартир с одинаковой ценой, то эти дополнительные 
позиции также попадают в итоговую выборку. И получается, что вместо трёх позиций клиенту отправляется больше.
Напишите SQL-запрос, который вернет список подходящих квартир. Клиента интересуют все варианты более 1 комнаты, чем дешевле, тем лучше.
В итоговой таблице выведите улицу, дом, цену и количество комнат.
Финальную таблицу отсортируйте по комнатам в обратном порядке и цене в прямом.
*/

select street, house, price, rooms
from (
    select *,
    rank() over(order by price) as ds
    from flats
    where rooms > 1
) tem_table
where ds <= 3
order by rooms desc, price

/*
В прошлой задаче мы искали варианты среди всех квартир: и двухкомнатных и трехкомнатных. Однако клиент попросил подобрать лучшие позиции отдельно 
по двушкам и отдельно по трёшкам, при этом сам алгоритм отбора квартир должен остаться прежним.
Напишите SQL-запрос, который вернет список подходящих квартир. Клиента интересуют все варианты более 1 комнаты, чем дешевле, тем лучше.
В итоговой таблице выведите количество комнат, улицу, дом и цену.
Финальную таблицу отсортируйте по комнатам в прямом порядке и цене, также в прямом порядке.
*/

select rooms, street, house, price
from (
        select *,
        rank() over(order by price) as ds
        from flats
        where rooms = 2
    union 
        select *,
        rank() over(order by price) as ds
        from flats
        where rooms = 3
) tem_table
where ds <= 3
order by rooms, price

/*
То есть нам нужно три лучших предложения с разными ценами (три варианта стоимости). Если среди этих вариантов будут квартиры с одинаковой ценой, 
то все они должны попасть в итоговую выборку. То есть в реальности мы можем получить не три квартиры, а более.
Напишите SQL-запрос, который вернет список подходящих квартир. Клиента снова интересуют все варианты более 1 комнаты, чем дешевле, тем лучше.
В итоговой таблице выведите улицу, дом, цену и количество комнат.
Финальную таблицу отсортируйте по цене в прямом порядке, а также по комнатам в обратном порядке.
*/

select street, house, price, rooms
from (
    select *,
    dense_rank() over(order by price) as ds
    from flats
    where rooms > 1
) tem_table
where ds <= 3
order by price, rooms desc

/*
В киберспортивном турнире участвует 10 команд (таблица cyber_teams) и каждой из них нужно сыграть по три игры (таблица cyber_games) против компьютера. 
Результаты игр фиксируются в таблице cyber_results и для подсчета набранных баллов используется следующая формула: количество убийств (kills) минус 
количество смертей (deaths) помноженное на три. Например, если команда в одной игре убила 60 противников и при этом 5 раз умерла, то её итоговый 
результат будет равен 60 - 5x3 = 45 баллов.
Напишите SQL-запрос для формирования итоговой таблицы мест после проведения турнира. В таблице должно быть 3 поля: place — место, team — название команды 
и points — общее количество набранных очков. В случае, если команды набирают одинаковое количество очков, они разделяют место между собой.
Итоговую таблицу отсортируйте по местам, а в случае одинакового места отсортируйте команды в алфавитном порядке.
*/

select dense_rank() over(order by sum(kills) - 3 * sum(deaths) desc) as place, 
team, 
sum(kills - deaths * 3) as points
from cyber_results cr 
join cyber_teams ct on cr.team_id = ct.id
join cyber_games cg on cr.game_id = cg.id
group by team
order by place, team