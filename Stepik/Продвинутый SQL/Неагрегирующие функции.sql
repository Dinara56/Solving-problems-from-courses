/*
В таблице films содержится информация о фильмах: id, рейтинг, год выпуска и количество голосов. 
Напишите SQL-запрос, который выведет три столбца: место фильма в рейтинге (колонка place), название фильма и его рейтинг.
Учитывайте, что места нужно расставить от 1 до 10, где 1 будет у самого популярного фильма.
Популярные фильмы должны стоять вверху таблицы.
*/

select row_number() over(order by rating desc) as place, name, rating from films

/*
Из-за отсутствия первичного ключа нет возможности обратиться к какой-то конкретной строке, так как все они являются равнозначными. 
И часто для уникализации строк в подобных таблицах используют функцию ROW_NUMBER.
Напишите SQL-запрос, который выведет все строки данной таблицы с нумерацией по порядку, начиная с единицы. 
Столбец с номерами должен называться line_num и идти первым, после него должны стоять order_id и product_id. 
Данные в таблице отсортируйте по номеру заказа, а потом по номеру товара.
*/

select row_number() over() as line_num, order_id, product_id from orders_products order by order_id, product_id

/*
Сайт выводит товары по 5 штук. Выберите из таблицы products товары, которые пользователи увидят на 3 странице 
каталога при сортировке в порядке возрастания цены (price).
В итоговой таблице нужно вывести 4 столбца: num - порядковый номер товара, name, count и price.
Обратите внимание, что порядковый номер товара нужно выводить с учетом того, что мы выводим данные на третьей 
странице и перед ней было еще 2 страницы, которые содержали 10 товаров.
*/

select row_number() over() as num, name, count, price from products order by price limit 10,5